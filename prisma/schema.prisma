// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?

  // Interview specific
  interviewSessions InterviewSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Industry {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  imageUrl    String?
  companies   Company[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  logoUrl     String?
  websiteUrl  String?
  industryId  String
  industry    Industry @relation(fields: [industryId], references: [id])
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id               String            @id @default(cuid())
  title            String
  description      String?
  slug             String            @unique
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
  interviewSets    InterviewSet[]
  interviewSessions InterviewSession[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model InterviewSet {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        InterviewSetType
  roleId      String
  role        Role             @relation(fields: [roleId], references: [id])
  questions   Question[]
  duration    Int              @default(900) // Duration in seconds (default 15 min)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum InterviewSetType {
  TECHNICAL
  COMPETENCY
  BEHAVIORAL
}

model Question {
  id             String       @id @default(cuid())
  text           String
  interviewSetId String
  interviewSet   InterviewSet @relation(fields: [interviewSetId], references: [id])
  hints          String?
  idealAnswer    String?
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model InterviewSession {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  roleId           String
  role             Role               @relation(fields: [roleId], references: [id])
  startedAt        DateTime           @default(now())
  completedAt      DateTime?
  responses        Response[]
  jobDescription   String?            @db.Text
  overallFeedback  String?            @db.Text
  technicalScore   Float?
  clarityScore     Float?
  confidenceScore  Float?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Response {
  id                String           @id @default(cuid())
  interviewSessionId String
  interviewSession  InterviewSession @relation(fields: [interviewSessionId], references: [id])
  questionText      String
  videoUrl          String?
  transcription     String?          @db.Text
  feedback          String?          @db.Text
  technicalScore    Float?
  clarityScore      Float?
  confidenceScore   Float?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}